/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Bean.Food;
import Bean.FoodProduction;
import Bean.Restaurant;
import Bean.RestaurantFood;
import DTO.FoodData;
import DTO.RestaurantData;
import DTO.RestaurantFoodData;
import Logic.FoodProductionLogic;
import Logic.Sort;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author thehackermonk
 */
public class FoodProductionForm extends javax.swing.JFrame {

    /**
     * Creates new form FoodProductionForm
     */
    public FoodProductionForm() {
        initComponents();
    }
    
    public void refreshFoodProductionTable(DefaultTableModel tableModel) {
        
        FoodProductionLogic foodProductionLogic = new FoodProductionLogic();
        FoodData foodData = new FoodData();
        RestaurantData restaurantData = new RestaurantData();
        
        DefaultTableModel restaurantFoodTableModel = (DefaultTableModel) restaurantFoodTable.getModel();
        
        String restaurantName, foodName;
        
        ArrayList<FoodProduction> foodProductionList = foodProductionLogic.getFoodProducedToday();
        Iterator<FoodProduction> foodProductionListIterator = foodProductionList.iterator();
        
        while (tableModel.getRowCount() > 0) {
            tableModel.removeRow(0);
        }
        
        while (foodProductionListIterator.hasNext()) {
            
            FoodProduction foodProduction = foodProductionListIterator.next();
            
            foodName = foodData.getFoodDetails(foodProduction.getFoodNo()).getName();
            restaurantName = restaurantData.getRestaurantDetails(foodProduction.getRestaurantNo()).getName();
            
            tableModel.addRow(new Object[]{restaurantName, foodName, foodProduction.getQuantity()});
            
        }
        
    }
    
    public void refreshRestaurantComboBox(DefaultComboBoxModel comboBox) {
        
        RestaurantData restaurantData = new RestaurantData();
        
        ArrayList<Restaurant> restaurantList = restaurantData.getAllRestaurantDetails();
        Iterator<Restaurant> restaurantListIterator = restaurantList.iterator();
        
        comboBox.removeAllElements();
        
        while (restaurantListIterator.hasNext()) {
            
            Restaurant restaurant = restaurantListIterator.next();
            comboBox.addElement(restaurant.getName());
            
        }
        
    }
    
    public void refreshFoodComboBox(DefaultComboBoxModel comboBox) {
        
        FoodData foodData = new FoodData();
        
        ArrayList<Food> foodList = foodData.getAllFoodDetails();
        Iterator<Food> foodListIterator = foodList.iterator();
        
        comboBox.removeAllElements();
        
        while (foodListIterator.hasNext()) {
            
            Food food = foodListIterator.next();
            comboBox.addElement(food.getName());
            
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        restaurantComboBox = new javax.swing.JComboBox<>();
        foodComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        decreaseCountButton = new javax.swing.JButton();
        increaseCountButton = new javax.swing.JButton();
        countTextField = new javax.swing.JTextField();
        addFoodButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        restaurantFoodTable = new javax.swing.JTable();
        produceFoodButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("Restaurant");

        restaurantComboBox.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        restaurantComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        restaurantComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                restaurantComboBoxFocusLost(evt);
            }
        });

        foodComboBox.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        foodComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Food");

        decreaseCountButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        decreaseCountButton.setText("-");
        decreaseCountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreaseCountButtonActionPerformed(evt);
            }
        });

        increaseCountButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        increaseCountButton.setText("+");
        increaseCountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseCountButtonActionPerformed(evt);
            }
        });

        countTextField.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        countTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        countTextField.setText("jTextField1");
        countTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                countTextFieldKeyReleased(evt);
            }
        });

        addFoodButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        addFoodButton.setText("ADD FOOD");
        addFoodButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFoodButtonActionPerformed(evt);
            }
        });

        restaurantFoodTable.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        restaurantFoodTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Restaurant", "Food", "Count"
            }
        ));
        jScrollPane1.setViewportView(restaurantFoodTable);

        produceFoodButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        produceFoodButton.setText("PRODUCE FOOD");
        produceFoodButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                produceFoodButtonActionPerformed(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        clearButton.setText("CLEAR");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        closeButton.setText("X");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(172, 172, 172)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(decreaseCountButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(countTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(increaseCountButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(addFoodButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(foodComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(restaurantComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(produceFoodButton)
                        .addGap(42, 42, 42)
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(220, 220, 220))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(closeButton)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(restaurantComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(foodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decreaseCountButton)
                    .addComponent(increaseCountButton)
                    .addComponent(countTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(addFoodButton)
                .addGap(218, 218, 218))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(closeButton)
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(produceFoodButton)
                    .addComponent(clearButton))
                .addContainerGap(76, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        
        Sort sort = new Sort();
        
        DefaultTableModel restaurantFoodTableModel = (DefaultTableModel) restaurantFoodTable.getModel();
        DefaultComboBoxModel restaurantComboBoxModel = (DefaultComboBoxModel) restaurantComboBox.getModel();
        DefaultComboBoxModel foodComboBoxModel = (DefaultComboBoxModel) foodComboBox.getModel();
        
        refreshFoodProductionTable(restaurantFoodTableModel);
        refreshRestaurantComboBox(restaurantComboBoxModel);
        refreshFoodComboBox(foodComboBoxModel);
        
        sort.sortComboBox(restaurantComboBoxModel);
        sort.sortComboBox(foodComboBoxModel);
        
        countTextField.setText("0");
        
        restaurantComboBox.requestFocus();

    }//GEN-LAST:event_formWindowGainedFocus

    private void restaurantComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_restaurantComboBoxFocusLost
        
        Food food;
        Restaurant restaurant;
        RestaurantData restaurantData = new RestaurantData();
        FoodData foodData = new FoodData();
        RestaurantFood restaurantFood;
        RestaurantFoodData restaurantFoodData = new RestaurantFoodData();
        Sort sort = new Sort();
        
        DefaultComboBoxModel foodComboBoxModel = (DefaultComboBoxModel) foodComboBox.getModel();
        
        String restaurantName;
        int restaurantNo, foodNo;
        
        ArrayList<RestaurantFood> restaurantFoodList;
        Iterator<RestaurantFood> restaurantFoodListIterator;
        
        foodComboBoxModel.removeAllElements();
        
        restaurantName = restaurantComboBox.getSelectedItem().toString();
        restaurant = restaurantData.getRestaurantDetails(restaurantName);
        
        restaurantNo = restaurant.getRestaurantNo();
        
        restaurantFoodList = restaurantFoodData.getAssignedFood(restaurantNo);
        restaurantFoodListIterator = restaurantFoodList.iterator();
        
        while (restaurantFoodListIterator.hasNext()) {
            
            restaurantFood = restaurantFoodListIterator.next();
            foodNo = restaurantFood.getNDBNo();
            food = foodData.getFoodDetails(foodNo);
            
            foodComboBoxModel.addElement(food.getName());
            
        }
        
        sort.sortComboBox(foodComboBoxModel);

    }//GEN-LAST:event_restaurantComboBoxFocusLost

    private void decreaseCountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decreaseCountButtonActionPerformed
        
        int count;
        
        count = Integer.parseInt(countTextField.getText());
        count--;
        if (count < 0) {
            count = 0;
        }
        countTextField.setText(count + "");

    }//GEN-LAST:event_decreaseCountButtonActionPerformed

    private void increaseCountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaseCountButtonActionPerformed
        
        int count = 0;
        
        count = Integer.parseInt(countTextField.getText());
        count++;
        countTextField.setText(count + "");

    }//GEN-LAST:event_increaseCountButtonActionPerformed

    private void addFoodButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFoodButtonActionPerformed
        
        DefaultTableModel restaurantFoodTableModel = (DefaultTableModel) restaurantFoodTable.getModel();
        
        String restaurant, food;
        int count;
        boolean check = true;
        
        restaurant = restaurantComboBox.getSelectedItem().toString();
        food = foodComboBox.getSelectedItem().toString();
        count = Integer.parseInt(countTextField.getText());
        
        for (int i = 0; i < restaurantFoodTableModel.getRowCount(); i++) {
            
            if ((restaurant.equals(restaurantFoodTableModel.getValueAt(i, 0).toString())) && (food.equals(restaurantFoodTableModel.getValueAt(i, 1).toString()))) {
                
                count = count + Integer.parseInt(restaurantFoodTableModel.getValueAt(i, 2).toString());
                restaurantFoodTableModel.setValueAt(count, i, 2);
                check = false;
                break;
                
            }
            
        }
        
        if (check) {
            restaurantFoodTableModel.addRow(new Object[]{restaurant, food, count});
        }
        
        countTextField.setText("0");
        restaurantComboBox.requestFocus();

    }//GEN-LAST:event_addFoodButtonActionPerformed

    private void produceFoodButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_produceFoodButtonActionPerformed
        
        FoodProductionLogic foodProductionLogic = new FoodProductionLogic();
        
        FoodData foodData = new FoodData();
        RestaurantData restaurantData = new RestaurantData();
        
        DefaultTableModel foodProductionTableModel = (DefaultTableModel) restaurantFoodTable.getModel();
        
        String restaurantName, foodName;
        
        ArrayList<FoodProduction> foodProductionList = new ArrayList<>();
        
        for (int i = 0; i < foodProductionTableModel.getRowCount(); i++) {
            
            Food food;
            FoodProduction foodProduction = new FoodProduction();
            Restaurant restaurant;
            
            restaurantName = foodProductionTableModel.getValueAt(i, 0).toString();
            foodName = foodProductionTableModel.getValueAt(i, 1).toString();
            
            food = foodData.getFoodDetails(foodName);
            restaurant = restaurantData.getRestaurantDetails(restaurantName);
            
            foodProduction.setRestaurantNo(restaurant.getRestaurantNo());
            foodProduction.setFoodNo(food.getNdbNo());
            foodProduction.setQuantity(Integer.parseInt(foodProductionTableModel.getValueAt(i, 2).toString()));
            
            foodProductionList.add(foodProduction);
            
        }
        
        if (foodProductionLogic.produceFood(foodProductionList)) {
            JOptionPane.showMessageDialog(null, "Foods produced successfully!");
        } else {
            JOptionPane.showMessageDialog(null, "Food production failed");
        }

    }//GEN-LAST:event_produceFoodButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        
        DefaultTableModel foodProductionTableModel = (DefaultTableModel) restaurantFoodTable.getModel();
        
        while (foodProductionTableModel.getRowCount() > 0) {
            foodProductionTableModel.removeRow(0);
        }

    }//GEN-LAST:event_clearButtonActionPerformed

    private void countTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_countTextFieldKeyReleased
        
        String input;
        
        if (!((evt.getKeyChar() >= '0') && (evt.getKeyChar() <= '9'))) {
            
            input = countTextField.getText();
            
            input = input.replace(input.substring(input.length() - 1), "");
            
            countTextField.setText(input);
            
        }

    }//GEN-LAST:event_countTextFieldKeyReleased

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        
        this.setVisible(false);
        new FoodnBeverageMenu().show();
        
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FoodProductionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FoodProductionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FoodProductionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FoodProductionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FoodProductionForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFoodButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JTextField countTextField;
    private javax.swing.JButton decreaseCountButton;
    private javax.swing.JComboBox<String> foodComboBox;
    private javax.swing.JButton increaseCountButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton produceFoodButton;
    private javax.swing.JComboBox<String> restaurantComboBox;
    private javax.swing.JTable restaurantFoodTable;
    // End of variables declaration//GEN-END:variables
}
